1) Boostrap
2) Hacer un header y footer. Header con el título "Factura electronica"
3) En lo que sería el body, hacer dos opciones:
	· NUEVA FACTURA
	· VER FACTURAS

[CONSIDERACIONES]
>>> Inputs -> http://getbootstrap.com/components/?#input-groups
>>> Alerts -> http://getbootstrap.com/components/?#alerts-dismissible
>>> Buttons -> http://getbootstrap.com/components/?#btn-groups

--------------------------------------------------------------------------------
PARA REFACTORIZAR EL PROYECTO DE FACT. ELECT. DE FORMA QUE INTERACTÚE CON EL USUARIO, SE HARÁ LO SIGUIENTE:

	1) Modificar la clase ServFactElect para que pueda recibir los parámetros del usuario para los campos de la factura.
		1.1) Parámetros del detalle del request
		1.2) Dependiendo de la cant. de reg. de la cabecera, hacer tantos detalles como esa cantidad.
	2) Modificar la clase Autorizacion para que pueda recibir el parámetro con la ruta del certificado del usuario
	3) Modificar la inicialización de los campos compuestos (los Arrays por ejemplo, IVA, Response, ...)
	4) Modificar la parte donde consulta el ult. compr. autorizado, de forma que esté en un método que el usuario pueda consultar.

--------------------------------------------------------------------------------
08/07/2015 09:46 hs.
REFACTORIZAR EL WEB SERVICE, DE FORMA QUE TENGA UN SOLO MÉTODO: ObtenerCAE(Factura f)
La clase 'Factura' es una clase sin comportamiento que maneja los campos de la factura para mandar al web service.
El método ObtenerCAE(...) recibe la Factura, ejecuta todos los métodos necesarios y devuelve la respuesta, conteniendo el CAE 
o los errores, dependiendo del caso.

--------------------------------------------------------------------------------
14/07/2015 09:08 hs.
REVISIÓN
- Con respecto a la factura, el campo CantReg de la cabecera indica la cantidad de registros del detalle de la factura, 
no la cantidad de 'detalles'. Por lo tanto, en base al total de la factura se discriminan los IVA (por ej., si tengo una factura
con un total de $121 podría ser un IVA {Id = 5, BaseImp = 100, Importe = 21} sobre un un item con monto de $100, y tendría
un solo registro).
- No me queda bien en claro que son los 'detalles' (por qué se menciona un lote de detalles)

Para que funcione (dado que sigue devolviendo el CAE vacío y sin errores) habria que probar de que la colección por defecto de los
w. s. sea Array en vez de List<>

>> PROBLEMA SOLUCIONADO: Parece que manejar listas y arrays para los ws es lo mismo. El problema era que el wsfe recibía los arreglos
   de cbtesAsoc, Tributos, etc. sin elementos, no en null... Se corrigió eso y ahora funciona.
   Además, se estaba mostrando mal los resultados del error. Hay que mostrar las observaciones en el objeto FeDetResp, y hacer
   un foreach anidado.

--------------------------------------------------------------------------------
15/07/2015 11:00 hs.
REVISIÓN
- El campo CantReg de la cabecera de la factura hace referencia a la cantidad de facturas que se van a enviar, o 'detalles'. 
La entrada anterior estaba equivocada.
- Los resultados se muestran correctamente. La forma anterior no contemplaba todos los casos, solo el caso de un error general como
un CUIT que factura erróneo, etc.. errores a nivel general por eso entraba el cabreq y detreq en null.
- Se comprobó que funciona con varios detalles o facturas. Se hicieron modificaciones en la clase ServFactElect para que tome bien
el último comprobante autorizado y use a partir del siguiente.

>> TAREA PENDIENTE: a partir del CUIT ingresado y el base a una estructura de directorio armada en base a CUITs de los que facturan, 
   modificar la clase Autorización para que lea el certificado correspondiente a dicho CUIT ingresado.
   La estructura seria la siguiente:
   ../Certificados/[nro_de_cuit]/[certificado.p12] 